def plot_some_fig():
    plt.figure(figsize=(15, 10))
    plt.subplot(5, 2, 1)
    plt.plot(data1.iloc[0][1:].values)
    plt.subplot(5, 2, 2)
    plt.plot(data1.iloc[1][1:].values)

    plt.subplot(5, 2, 3)
    plt.plot(data2.iloc[0][1:].values)
    plt.subplot(5, 2, 4)
    plt.plot(data2.iloc[1][1:].values)

    plt.subplot(5, 2, 5)
    plt.plot(data3.iloc[0][1:].values)
    plt.subplot(5, 2, 6)
    plt.plot(data3.iloc[1][1:].values)

    plt.subplot(5, 2, 7)
    plt.plot(data4.iloc[0][1:].values)
    plt.subplot(5, 2, 8)
    plt.plot(data4.iloc[1][1:].values)

    plt.subplot(5, 2, 9)
    plt.plot(data5.iloc[0][1:].values)
    plt.subplot(5, 2, 10)
    plt.plot(data5.iloc[1][1:].values)

    plt.xlabel('Samples')
    plt.show()

#nodes_avg = [len(g.nodes) for g in graphs]
#print(sorted(nodes_avg))
#nodes_avg = sorted(nodes_avg)
#unique, counts = np.unique(nodes_avg, return_counts=True)
#print(np.asarray((unique, counts)).T)

train_gen = datagen.flow_from_directory(DATA_FOLDER + '/img/',
                                            batch_size=BATCH_SIZE,
                                            subset='training',
                                            color_mode='rgb')

    test_gen = datagen.flow_from_directory(DATA_FOLDER + '/img/',
                                           batch_size=BATCH_SIZE,
                                           subset='validation',
                                           color_mode='rgb')


'''N_CLASSES = 2
all_graphs = build_graphs_from_files('proteins', 'PROTEINS_full', N_CLASSES)
build_images(all_graphs, 'proteins')
nodes = 0
for k in range(N_CLASSES):
    graphs_class = all_graphs[k]
    nodes += np.sum([len(j.nodes) for j in graphs_class])
total_graphs = np.sum(len(graphs_class) for graphs_class in all_graphs)
nodes_mean = nodes / total_graphs
print("Total graphs:", total_graphs)
print("Avg nodes:", nodes_mean)'''
